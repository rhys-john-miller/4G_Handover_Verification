(* 
    Rhys Miller
    S1 Protocol

    Public Messages:
    msg1 -- ms report
    msg11
    msg18

    Ciphered Messages:
    msg3  -- ho req, SN MME
    msg5  -- ho req, MME TN 
    msg7
    msg8
    msg9
    msg10
    msg14
    msg15
*)

(*Channels for the Protocol Secret and Public*)
free pubch : channel. 

(*Key for encryption*)
type key. 
type sskey.
type spkey.

(*Security Algorithms*)
type alg. 

(*Capability Sets*)
type caps. 

(*Nonce Type*)
type nonce.

(*IMSI Type*)
type imsi.

(*--
    Functions
--*)

(*Tobitstring Converter Function*)
fun tobitstring (key) : bitstring[data,typeConverter].

(*Encryption for Nonces*)
fun noncetobitstring(nonce):bitstring[data,typeConverter].

(* Signature *)
fun spk(sskey):spkey.
fun sign(bitstring,sskey):bitstring.
reduc forall m:bitstring,k:sskey; getmsg(sign(m,k))=m.
reduc forall m:bitstring,k:sskey; verify(sign(m,k),spk(k))=m.

(*-----------------------------------------------------------------*)

(*Encryption and Decryption Theory*)
fun senc(alg, bitstring, key) : bitstring.
reduc forall a: alg, msg: bitstring, k: key; sdec(a, senc(a,msg,k),k) = msg.

(*Consset fuses alg and caps together to one list, with alg at the top/head of the list .*)
fun consset (alg,caps):caps[data]. const emptyset:caps.

(*
    Predicate mem represents the set membership between the Security Algorithms
    and Capability Sets.
*)
pred mem(alg , caps).
clauses 

    (*The first clause states that mem(X,N) where n is the concatation of x and y*)
    forall x : alg, y: caps; mem( x , consset(x, y));

    (* The second clause states that mem(X,N) holds if N = consset(X′,N′)
     and mem(X,N′) holds, that is, if X is in the tail of N.*)

    forall x : alg, y: caps, z: alg; mem(x, y) -> mem(x, consset(z, y)).

(*Key Derivation Function, i.e., takes in a bitstring and key to produce another key. Used for Key generation*)
fun kdf(bitstring, key) : key.

(*MAC function takes in alg and a key. To produce an authentication code*)
fun mac (alg, key) : bitstring.

(* --- Events --- *)
(*Sanity check protocol can terminate.*) 
event terminateSend(bitstring).   (* this is UE; it should stand from the 'sync' messages 16-18 being sent*)
event terminateAccept(bitstring). (* this is in target node; it is now after 
                                   reading the 'sync' messages but the modelling  there seems obsolete *)

event kenbstarUE(key).
event kenbstarTE(key).

(*Log when the UE Starts*)
event UESendsMeasurementReport(bitstring,bitstring). (*after the report measurement; after msg1*)
event TNReceivesHORequestFromMME(bitstring). (*after the HO Request is received in TN from MME; after message 5;*)
event SNSendsHORequiredToMME(bitstring). (*after the HO Require is sent by SN to the MME; after message 3;*)
event SNReceivesHOCommandFromMME(alg). (*after the HO Command is received in SN from MME; after message 10;*)

event endTransferTE(bitstring).
event middleTransferMME(bitstring).
event startTransfer(bitstring).

(*Query 1*)
query b:bitstring, b1:bitstring, b2:bitstring;
    event(TNReceivesHORequestFromMME(b)) ==> event(UESendsMeasurementReport(b1,b2)).

(*****Query 2*****)
(*SNode is finishing  a HO for no reason, i.e., no UE has asked*)
query a:alg, b1:bitstring, b2:bitstring;
    event(SNReceivesHOCommandFromMME(a)) ==>  event(UESendsMeasurementReport(b1,b2)).

(*****Query 3*****)
(*SNode is finishing HO Commands in the due steps, with no input for UE*)
query a:alg, b1:bitstring, b2:bitstring, b3:bitstring;
    (event(SNReceivesHOCommandFromMME(a)) && event(SNSendsHORequiredToMME(b3)) )  ==> event(UESendsMeasurementReport(b1,b2)) .
 
(*****Query 4.A*****)
(*TNode is transfering over, with no original ask for UE*) (*Need to
investigate why this does not prove*)
query b1:bitstring, ba:bitstring, bb:bitstring;
  event(startTransfer(b1)) ==> event(UESendsMeasurementReport(ba,bb)).

(*****Query 4.B*****)
(*TNode is transfering over, with no original ask for UE*) (*Need to
investigate why this does not prove*)
query b1:bitstring, ba:bitstring, bb:bitstring;
  event(middleTransferMME(b1)) ==> event(UESendsMeasurementReport(ba,bb)).

(*****Query 4.C*****)
(*TNode is transfering over, with no original ask for UE*) (*Need to
investigate why this does not prove*)
query b1:bitstring, ba:bitstring, bb:bitstring;
  event(endTransferTE(b1)) ==> event(UESendsMeasurementReport(ba,bb)).

(*****Query 5*****)
(*TNode is transfering over, with no original ask for UE*) (*Need to
investigate why this does not prove*)
query b1:bitstring, b2:bitstring;
    event(endTransferTE(b1)) ==> event(startTransfer(b2)).

(*****Query 6*****)
(*TNode is transfering over, with no original ask for UE*) 
query k:key;
  (event(kenbstarTE(k)) ==> event(kenbstarUE(k))).

(* UE process *)
let UE(ueIMSI:imsi, uecaps : caps, nh_2 : key, cellid:bitstring, signK:sskey, pubkSN:spkey) =  
   
    (*msg 1*)
    (*Measurement Report.*)
    new radioSignal:bitstring;
    new PCI:bitstring;
    new ueNa:nonce;

    (*Event to capture when MSR is triggered. *)
    event UESendsMeasurementReport(radioSignal,PCI);
    
    let (patchSigmaMSR:bitstring) = sign((radioSignal, PCI, ueNa, ueIMSI), signK) in 

    (* TO ADD: public channel as per 3GPP specs release x.y*)
    out(pubch, patchSigmaMSR); 

    (*
    --Handover Command 
    1) Target C-RNTI -NOT NEEDED- 
    2) Target DRB ID -NOT NEEDED-
    3) Target eNB AS Security Algorithm
    *)
    in(pubch, sigmaPatchedHO:bitstring); (*msg 11*)

    let (asAlg:alg, ueNaFromSN:nonce) = verify(patchSigmaMSR, pubkSN) in 

    if ueNaFromSN = ueNa then

    (* this 'if' may be un-necessary; TBC*)
    if (mem(asAlg, uecaps)) then

        let kenbstar: key = kdf(cellid,nh_2) in

        event kenbstarUE(kenbstar);

        let macVal: bitstring = mac(asAlg, kenbstar) in
        
        let data: bitstring = senc(asAlg,macVal,kenbstar) in 
        
        event terminateSend(data);

        let (patchSigmaHC:bitstring) = sign((data, ueNa, ueIMSI), signK) in 
  
        out(pubch, patchSigmaHC);(*msg18*) 
0.


let MME(uecaps : caps, nh_2 : key, signK:sskey, pubkSN:spkey, pubkTN:spkey) =
    
    (*Requesting Handover*)
    in(pubch, sigma1:bitstring); (*msg 3*)

    let (handoverType:bitstring, targetCellID:bitstring, cellidSource:bitstring, ueNaFromSE:nonce) = verify(sigma1, pubkSN) in 

    let sigma2:bitstring = sign((uecaps,nh_2,cellidSource, ueNaFromSE), signK) in 

    (*Handover Request*)
    out(pubch, sigma2); (*msg 5*)

    (*Request Acknowledgment*)
    in(pubch, (sigma3:bitstring));  (*msg 7*)

    let (asAlg:alg, id1:bitstring, id2:bitstring)  = verify(sigma3, pubkTN) in 

    let sigma4:bitstring = sign((asAlg,handoverType,targetCellID,cellidSource, ueNaFromSE), signK) in

    (*Handover Command*)
    out(pubch, sigma4); (*msg 10*)

    (*msg 14 eNB Status Transfer*)
    in(pubch, sigma5:bitstring);

    new DLCount:bitstring;
    new ULCount:bitstring;

    let (DLCount:bitstring, ULCount:bitstring) = verify(sigma5, pubkSN) in  

    event middleTransferMME(sigma5);

    let sigma6:bitstring = sign((DLCount,ULCount), signK) in 

    (*msg 15 MME Status Transfer*)
    out(pubch,sigma6);
0.

let SeNodeB(cellidSource: bitstring, signK:sskey, pubkMME:spkey, pubkUE:spkey) =
    
    (*msg 1 Measurement Reports*)
    in(pubch, patchSigmaMSR:bitstring);

    let (radioSignal:bitstring, PCI:bitstring, ueNaFromUE:nonce, ueIMSI:imsi) = verify(patchSigmaMSR, pubkUE) in 

    (*Handover Required*)
    new targetCellID: bitstring;
    new handoverType: bitstring;

    let sigma1:bitstring = sign((handoverType,targetCellID,cellidSource,ueNaFromUE), signK) in 

    event SNSendsHORequiredToMME(targetCellID);

    out(pubch, sigma1); (*msg 3*) 

    (*Handover Command*)
    in(pubch, sigma4:bitstring); (*msg 10*)

    let (asAlg:alg, handoverType1:bitstring, targetCellID2:bitstring, cellidSource3:bitstring, ueNaFromMME:nonce) = verify(sigma4, pubkMME) in 

    if ueNaFromUE = ueNaFromMME then

    event SNReceivesHOCommandFromMME(asAlg); 

    let sigmaPatchedHO:bitstring = sign((asAlg,ueNaFromUE), signK) in 

    (*UE Handover*)
    out(pubch, sigmaPatchedHO); (*msg 11*)

    new DLCount:bitstring;
    new ULCount:bitstring;

    let sigma5:bitstring = sign((DLCount,ULCount), signK) in 

    event startTransfer(DLCount);

    (*msg 14 eNB Status Transfer*)
    out(pubch, sigma5);
0.

let TeNodeB(cellidTarget: bitstring, signK:sskey, pubkMME:spkey, pubkSN:spkey, pubkUE:spkey) =
    
    (*Handover Request*)
    in(pubch, sigma2:bitstring); (*msg 5*)

    let (uecaps:caps, nh_2:key, cellidSource:bitstring, ueNaFromSE:nonce) = verify(sigma2,pubkMME) in
    
    event TNReceivesHORequestFromMME(cellidSource);

    let asAlg: alg suchthat mem(asAlg ,uecaps) in

    (******msg 6******)

    let sigma3:bitstring = sign((asAlg, cellidSource, cellidTarget), signK) in 

    (*--Handover Request Acknowledgment*)
    out(pubch, sigma3); (*msg 7*)


    in(pubch, sigma6:bitstring);

    let (DLCount:bitstring, ULCount:bitstring) = verify(sigma6, pubkMME) in 

    event endTransferTE(sigma6);

    (*Handover Confirm*)
    in(pubch, patchSigmaHC: bitstring);

    let (data:bitstring, ueNaFromUE:nonce, ueIMSI:imsi) = verify(patchSigmaHC, pubkUE) in 

    if ueNaFromUE = ueNaFromSE then

    let kenbstar: key = kdf(cellidSource,nh_2) in

    event kenbstarTE(kenbstar);

    let rrcmac : bitstring = sdec(asAlg, data, kenbstar) in

    let macVal: bitstring = mac(asAlg, kenbstar) in

    if rrcmac = macVal then 
        event terminateAccept(data);
0.

(*--
Main Process
--*)
process
    (*UE's accepted Algs.*)
    new a1: alg; 
    new a2: alg;

    (*Setting up of the UE's IMSI*)
    new ueIMSI: imsi;

    (*
        Key that would have been generated by the AKA protocol when it first 
        communicates with base station.
    *)
    new keyAKA: key; 

    (*Secret Key for Signatures.*)
    new skUE:sskey;
    new skSE:sskey;
    new skTE:sskey;
    new skMME:sskey;

    (*Public Keys for Signatures.*)
    let pkUE=spk(skUE) in 
    let pkSE=spk(skSE) in 
    let pkTE=spk(skTE) in 
    let pkMME=spk(skMME) in 

    (*Cell id of the base station we are trying to handover too.*)
    new cellidSource: bitstring;
    new cellidTarget: bitstring; 

    (*Creates a set of Algorithms that are being supported by the UE*)
    let uecaps = consset(a1, consset(a2,emptyset)) in

    (*Starts the Protocol by declaring these variables on the public channel.
    RRC Setup *)
    out(pubch, (uecaps, cellidSource, cellidTarget));

    (*if these are not created like so, we do not need these detailed declarations*)
    let kenb : key = kdf(cellidSource, keyAKA) in
    let nh_1 : key = kdf(tobitstring(kenb), keyAKA) in
    let nh_2 : key = kdf(tobitstring(nh_1), keyAKA) in


    (
        (UE(ueIMSI, uecaps, nh_2, cellidSource, skUE, pkSE)) | 
        (SeNodeB(cellidSource, skSE, pkMME, pkUE)) |
        (TeNodeB(cellidTarget, skTE, pkMME, pkSE, pkUE)) | 
        (MME(uecaps, nh_2,skMME, pkSE, pkTE)) 
    )